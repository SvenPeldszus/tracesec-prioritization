/*
 * generated by Xtext 2.25.0
 */
package org.tracesec.graph.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GraphConfigurationGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDefaultAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDefaultINTTerminalRuleCall_0_2_0 = (RuleCall)cDefaultAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cConsiderKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConsiderAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConsiderConsiderEnumRuleCall_1_2_0 = (RuleCall)cConsiderAssignment_1_2.eContents().get(0);
		private final Assignment cNamespacesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamespacesNamespaceParserRuleCall_2_0 = (RuleCall)cNamespacesAssignment_2.eContents().get(0);
		
		//Configuration:
		//    ("default" "=" default=INT)?
		//    ("consider" "=" consider=Consider)?
		//    (namespaces+=Namespace)+;
		@Override public ParserRule getRule() { return rule; }
		
		//("default" "=" default=INT)?
		//("consider" "=" consider=Consider)?
		//(namespaces+=Namespace)+
		public Group getGroup() { return cGroup; }
		
		//("default" "=" default=INT)?
		public Group getGroup_0() { return cGroup_0; }
		
		//"default"
		public Keyword getDefaultKeyword_0_0() { return cDefaultKeyword_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//default=INT
		public Assignment getDefaultAssignment_0_2() { return cDefaultAssignment_0_2; }
		
		//INT
		public RuleCall getDefaultINTTerminalRuleCall_0_2_0() { return cDefaultINTTerminalRuleCall_0_2_0; }
		
		//("consider" "=" consider=Consider)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"consider"
		public Keyword getConsiderKeyword_1_0() { return cConsiderKeyword_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//consider=Consider
		public Assignment getConsiderAssignment_1_2() { return cConsiderAssignment_1_2; }
		
		//Consider
		public RuleCall getConsiderConsiderEnumRuleCall_1_2_0() { return cConsiderConsiderEnumRuleCall_1_2_0; }
		
		//(namespaces+=Namespace)+
		public Assignment getNamespacesAssignment_2() { return cNamespacesAssignment_2; }
		
		//Namespace
		public RuleCall getNamespacesNamespaceParserRuleCall_2_0() { return cNamespacesNamespaceParserRuleCall_2_0; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageSTRINGTerminalRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefaultKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDefaultAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDefaultINTTerminalRuleCall_3_2_0 = (RuleCall)cDefaultAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConsiderKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConsiderAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConsiderConsiderEnumRuleCall_4_2_0 = (RuleCall)cConsiderAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIncludeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cIncludeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cIncludeTypeParserRuleCall_5_2_0 = (RuleCall)cIncludeAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExcludeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExcludeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cExcludeEClassCrossReference_6_2_0 = (CrossReference)cExcludeAssignment_6_2.eContents().get(0);
		private final RuleCall cExcludeEClassIDTerminalRuleCall_6_2_0_1 = (RuleCall)cExcludeEClassCrossReference_6_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Namespace:
		//    "namespace" package=STRING "{"
		//    ("default" "=" default=INT)?
		//    ("consider" "=" consider=Consider)?
		//    ("include" "{"
		//    (include+=Type)*
		//    "}")?
		//    ("exclude" "{"
		//    (exclude+=[ecore::EClass])+
		//    "}")?
		//    "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"namespace" package=STRING "{"
		//("default" "=" default=INT)?
		//("consider" "=" consider=Consider)?
		//("include" "{"
		//(include+=Type)*
		//"}")?
		//("exclude" "{"
		//(exclude+=[ecore::EClass])+
		//"}")?
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//package=STRING
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//STRING
		public RuleCall getPackageSTRINGTerminalRuleCall_1_0() { return cPackageSTRINGTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//("default" "=" default=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"default"
		public Keyword getDefaultKeyword_3_0() { return cDefaultKeyword_3_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//default=INT
		public Assignment getDefaultAssignment_3_2() { return cDefaultAssignment_3_2; }
		
		//INT
		public RuleCall getDefaultINTTerminalRuleCall_3_2_0() { return cDefaultINTTerminalRuleCall_3_2_0; }
		
		//("consider" "=" consider=Consider)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"consider"
		public Keyword getConsiderKeyword_4_0() { return cConsiderKeyword_4_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//consider=Consider
		public Assignment getConsiderAssignment_4_2() { return cConsiderAssignment_4_2; }
		
		//Consider
		public RuleCall getConsiderConsiderEnumRuleCall_4_2_0() { return cConsiderConsiderEnumRuleCall_4_2_0; }
		
		//("include" "{"
		//(include+=Type)*
		//"}")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"include"
		public Keyword getIncludeKeyword_5_0() { return cIncludeKeyword_5_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//(include+=Type)*
		public Assignment getIncludeAssignment_5_2() { return cIncludeAssignment_5_2; }
		
		//Type
		public RuleCall getIncludeTypeParserRuleCall_5_2_0() { return cIncludeTypeParserRuleCall_5_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//("exclude" "{"
		//(exclude+=[ecore::EClass])+
		//"}")?
		public Group getGroup_6() { return cGroup_6; }
		
		//"exclude"
		public Keyword getExcludeKeyword_6_0() { return cExcludeKeyword_6_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//(exclude+=[ecore::EClass])+
		public Assignment getExcludeAssignment_6_2() { return cExcludeAssignment_6_2; }
		
		//[ecore::EClass]
		public CrossReference getExcludeEClassCrossReference_6_2_0() { return cExcludeEClassCrossReference_6_2_0; }
		
		//ID
		public RuleCall getExcludeEClassIDTerminalRuleCall_6_2_0_1() { return cExcludeEClassIDTerminalRuleCall_6_2_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeEClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeEClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConsiderKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cConsiderAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConsiderConsiderEnumRuleCall_3_2_0 = (RuleCall)cConsiderAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefaultKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDefaultAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDefaultINTTerminalRuleCall_4_2_0 = (RuleCall)cDefaultAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIncludeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cInlcudeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cInlcudeEdgeParserRuleCall_5_2_0 = (RuleCall)cInlcudeAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExcludeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExcludeAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cExcludeEReferenceCrossReference_6_2_0 = (CrossReference)cExcludeAssignment_6_2.eContents().get(0);
		private final RuleCall cExcludeEReferenceIDTerminalRuleCall_6_2_0_1 = (RuleCall)cExcludeEReferenceCrossReference_6_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Type:
		//    "type" type=[ecore::EClass] "{"
		//    ("consider" "=" consider=Consider)?
		//    ("default" "=" default=INT)?
		//    ("include" "{"
		//    (inlcude+=Edge)+
		//    "}")?
		//    ("exclude" "{"
		//    (exclude+=[ecore::EReference])+
		//    "}")?
		//    "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"type" type=[ecore::EClass] "{"
		//("consider" "=" consider=Consider)?
		//("default" "=" default=INT)?
		//("include" "{"
		//(inlcude+=Edge)+
		//"}")?
		//("exclude" "{"
		//(exclude+=[ecore::EReference])+
		//"}")?
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//type=[ecore::EClass]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_1_0() { return cTypeEClassCrossReference_1_0; }
		
		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_1_0_1() { return cTypeEClassIDTerminalRuleCall_1_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//("consider" "=" consider=Consider)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"consider"
		public Keyword getConsiderKeyword_3_0() { return cConsiderKeyword_3_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//consider=Consider
		public Assignment getConsiderAssignment_3_2() { return cConsiderAssignment_3_2; }
		
		//Consider
		public RuleCall getConsiderConsiderEnumRuleCall_3_2_0() { return cConsiderConsiderEnumRuleCall_3_2_0; }
		
		//("default" "=" default=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"default"
		public Keyword getDefaultKeyword_4_0() { return cDefaultKeyword_4_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//default=INT
		public Assignment getDefaultAssignment_4_2() { return cDefaultAssignment_4_2; }
		
		//INT
		public RuleCall getDefaultINTTerminalRuleCall_4_2_0() { return cDefaultINTTerminalRuleCall_4_2_0; }
		
		//("include" "{"
		//(inlcude+=Edge)+
		//"}")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"include"
		public Keyword getIncludeKeyword_5_0() { return cIncludeKeyword_5_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//(inlcude+=Edge)+
		public Assignment getInlcudeAssignment_5_2() { return cInlcudeAssignment_5_2; }
		
		//Edge
		public RuleCall getInlcudeEdgeParserRuleCall_5_2_0() { return cInlcudeEdgeParserRuleCall_5_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//("exclude" "{"
		//(exclude+=[ecore::EReference])+
		//"}")?
		public Group getGroup_6() { return cGroup_6; }
		
		//"exclude"
		public Keyword getExcludeKeyword_6_0() { return cExcludeKeyword_6_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//(exclude+=[ecore::EReference])+
		public Assignment getExcludeAssignment_6_2() { return cExcludeAssignment_6_2; }
		
		//[ecore::EReference]
		public CrossReference getExcludeEReferenceCrossReference_6_2_0() { return cExcludeEReferenceCrossReference_6_2_0; }
		
		//ID
		public RuleCall getExcludeEReferenceIDTerminalRuleCall_6_2_0_1() { return cExcludeEReferenceIDTerminalRuleCall_6_2_0_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.Edge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceEReferenceCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceEReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceEReferenceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTypeEClassCrossReference_2_1_0 = (CrossReference)cTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cTypeEClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTypeEClassCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cTargetEReferenceCrossReference_2_2_1_0 = (CrossReference)cTargetAssignment_2_2_1.eContents().get(0);
		private final RuleCall cTargetEReferenceIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cTargetEReferenceCrossReference_2_2_1_0.eContents().get(1);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionDirectionEnumRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		private final Assignment cWeightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWeightWeightParserRuleCall_4_0 = (RuleCall)cWeightAssignment_4.eContents().get(0);
		
		//Edge:
		//    "reference" reference=[ecore::EReference] ("--" type=[ecore::EClass] ("--" target=[ecore::EReference])?)?
		//    direction=Direction weight=Weight;
		@Override public ParserRule getRule() { return rule; }
		
		//"reference" reference=[ecore::EReference] ("--" type=[ecore::EClass] ("--" target=[ecore::EReference])?)?
		//direction=Direction weight=Weight
		public Group getGroup() { return cGroup; }
		
		//"reference"
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }
		
		//reference=[ecore::EReference]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[ecore::EReference]
		public CrossReference getReferenceEReferenceCrossReference_1_0() { return cReferenceEReferenceCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceEReferenceIDTerminalRuleCall_1_0_1() { return cReferenceEReferenceIDTerminalRuleCall_1_0_1; }
		
		//("--" type=[ecore::EClass] ("--" target=[ecore::EReference])?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_0() { return cHyphenMinusHyphenMinusKeyword_2_0; }
		
		//type=[ecore::EClass]
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//[ecore::EClass]
		public CrossReference getTypeEClassCrossReference_2_1_0() { return cTypeEClassCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTypeEClassIDTerminalRuleCall_2_1_0_1() { return cTypeEClassIDTerminalRuleCall_2_1_0_1; }
		
		//("--" target=[ecore::EReference])?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_2_0() { return cHyphenMinusHyphenMinusKeyword_2_2_0; }
		
		//target=[ecore::EReference]
		public Assignment getTargetAssignment_2_2_1() { return cTargetAssignment_2_2_1; }
		
		//[ecore::EReference]
		public CrossReference getTargetEReferenceCrossReference_2_2_1_0() { return cTargetEReferenceCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getTargetEReferenceIDTerminalRuleCall_2_2_1_0_1() { return cTargetEReferenceIDTerminalRuleCall_2_2_1_0_1; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_3_0() { return cDirectionDirectionEnumRuleCall_3_0; }
		
		//weight=Weight
		public Assignment getWeightAssignment_4() { return cWeightAssignment_4; }
		
		//Weight
		public RuleCall getWeightWeightParserRuleCall_4_0() { return cWeightWeightParserRuleCall_4_0; }
	}
	public class WeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.Weight");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberWeightParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeWeightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Weight: NumberWeight | AttributeWeight;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberWeight | AttributeWeight
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberWeight
		public RuleCall getNumberWeightParserRuleCall_0() { return cNumberWeightParserRuleCall_0; }
		
		//AttributeWeight
		public RuleCall getAttributeWeightParserRuleCall_1() { return cAttributeWeightParserRuleCall_1; }
	}
	public class NumberWeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.NumberWeight");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberWeight: value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class AttributeWeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.AttributeWeight");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValueEAttributeCrossReference_0 = (CrossReference)cValueAssignment.eContents().get(0);
		private final RuleCall cValueEAttributeIDTerminalRuleCall_0_1 = (RuleCall)cValueEAttributeCrossReference_0.eContents().get(1);
		
		//AttributeWeight: value=[ecore::EAttribute];
		@Override public ParserRule getRule() { return rule; }
		
		//value=[ecore::EAttribute]
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//[ecore::EAttribute]
		public CrossReference getValueEAttributeCrossReference_0() { return cValueEAttributeCrossReference_0; }
		
		//ID
		public RuleCall getValueEAttributeIDTerminalRuleCall_0_1() { return cValueEAttributeIDTerminalRuleCall_0_1; }
	}
	
	public class ConsiderElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.Consider");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLALLKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONENONEKeyword_1_0 = (Keyword)cNONEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Consider:
		//    ALL="ALL" | NONE="NONE";
		public EnumRule getRule() { return rule; }
		
		//ALL="ALL" | NONE="NONE"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALL="ALL"
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }
		
		//"ALL"
		public Keyword getALLALLKeyword_0_0() { return cALLALLKeyword_0_0; }
		
		//NONE="NONE"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_1() { return cNONEEnumLiteralDeclaration_1; }
		
		//"NONE"
		public Keyword getNONENONEKeyword_1_0() { return cNONENONEKeyword_1_0; }
	}
	public class DirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.tracesec.graph.dsl.GraphConfiguration.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFWDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFWDHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cFWDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBWDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBWDLessThanSignHyphenMinusKeyword_1_0 = (Keyword)cBWDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBIEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBILessThanSignHyphenMinusGreaterThanSignKeyword_2_0 = (Keyword)cBIEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Direction:
		//    FWD="->" | BWD="<-" | BI="<->";
		public EnumRule getRule() { return rule; }
		
		//FWD="->" | BWD="<-" | BI="<->"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FWD="->"
		public EnumLiteralDeclaration getFWDEnumLiteralDeclaration_0() { return cFWDEnumLiteralDeclaration_0; }
		
		//"->"
		public Keyword getFWDHyphenMinusGreaterThanSignKeyword_0_0() { return cFWDHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//BWD="<-"
		public EnumLiteralDeclaration getBWDEnumLiteralDeclaration_1() { return cBWDEnumLiteralDeclaration_1; }
		
		//"<-"
		public Keyword getBWDLessThanSignHyphenMinusKeyword_1_0() { return cBWDLessThanSignHyphenMinusKeyword_1_0; }
		
		//BI="<->"
		public EnumLiteralDeclaration getBIEnumLiteralDeclaration_2() { return cBIEnumLiteralDeclaration_2; }
		
		//"<->"
		public Keyword getBILessThanSignHyphenMinusGreaterThanSignKeyword_2_0() { return cBILessThanSignHyphenMinusGreaterThanSignKeyword_2_0; }
	}
	
	private final ConfigurationElements pConfiguration;
	private final NamespaceElements pNamespace;
	private final TypeElements pType;
	private final EdgeElements pEdge;
	private final WeightElements pWeight;
	private final NumberWeightElements pNumberWeight;
	private final AttributeWeightElements pAttributeWeight;
	private final ConsiderElements eConsider;
	private final DirectionElements eDirection;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraphConfigurationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pConfiguration = new ConfigurationElements();
		this.pNamespace = new NamespaceElements();
		this.pType = new TypeElements();
		this.pEdge = new EdgeElements();
		this.pWeight = new WeightElements();
		this.pNumberWeight = new NumberWeightElements();
		this.pAttributeWeight = new AttributeWeightElements();
		this.eConsider = new ConsiderElements();
		this.eDirection = new DirectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.tracesec.graph.dsl.GraphConfiguration".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Configuration:
	//    ("default" "=" default=INT)?
	//    ("consider" "=" consider=Consider)?
	//    (namespaces+=Namespace)+;
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Namespace:
	//    "namespace" package=STRING "{"
	//    ("default" "=" default=INT)?
	//    ("consider" "=" consider=Consider)?
	//    ("include" "{"
	//    (include+=Type)*
	//    "}")?
	//    ("exclude" "{"
	//    (exclude+=[ecore::EClass])+
	//    "}")?
	//    "}";
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//Type:
	//    "type" type=[ecore::EClass] "{"
	//    ("consider" "=" consider=Consider)?
	//    ("default" "=" default=INT)?
	//    ("include" "{"
	//    (inlcude+=Edge)+
	//    "}")?
	//    ("exclude" "{"
	//    (exclude+=[ecore::EReference])+
	//    "}")?
	//    "}";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Edge:
	//    "reference" reference=[ecore::EReference] ("--" type=[ecore::EClass] ("--" target=[ecore::EReference])?)?
	//    direction=Direction weight=Weight;
	public EdgeElements getEdgeAccess() {
		return pEdge;
	}
	
	public ParserRule getEdgeRule() {
		return getEdgeAccess().getRule();
	}
	
	//Weight: NumberWeight | AttributeWeight;
	public WeightElements getWeightAccess() {
		return pWeight;
	}
	
	public ParserRule getWeightRule() {
		return getWeightAccess().getRule();
	}
	
	//NumberWeight: value=INT;
	public NumberWeightElements getNumberWeightAccess() {
		return pNumberWeight;
	}
	
	public ParserRule getNumberWeightRule() {
		return getNumberWeightAccess().getRule();
	}
	
	//AttributeWeight: value=[ecore::EAttribute];
	public AttributeWeightElements getAttributeWeightAccess() {
		return pAttributeWeight;
	}
	
	public ParserRule getAttributeWeightRule() {
		return getAttributeWeightAccess().getRule();
	}
	
	//enum Consider:
	//    ALL="ALL" | NONE="NONE";
	public ConsiderElements getConsiderAccess() {
		return eConsider;
	}
	
	public EnumRule getConsiderRule() {
		return getConsiderAccess().getRule();
	}
	
	//enum Direction:
	//    FWD="->" | BWD="<-" | BI="<->";
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
