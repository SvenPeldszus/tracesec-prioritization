/*
 * generated by Xtext 2.34.0
 */
grammar InternalGraphConfiguration;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.tracesec.graph.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.tracesec.graph.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.tracesec.graph.dsl.services.GraphConfigurationGrammarAccess;

}

@parser::members {

 	private GraphConfigurationGrammarAccess grammarAccess;

    public InternalGraphConfigurationParser(TokenStream input, GraphConfigurationGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Configuration";
   	}

   	@Override
   	protected GraphConfigurationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	iv_ruleConfiguration=ruleConfiguration
	{ $current=$iv_ruleConfiguration.current; }
	EOF;

// Rule Configuration
ruleConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='default'
			{
				newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getDefaultKeyword_0_0());
			}
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getConfigurationAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					lv_default_2_0=RULE_INT
					{
						newLeafNode(lv_default_2_0, grammarAccess.getConfigurationAccess().getDefaultINTTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConfigurationRule());
						}
						setWithLastConsumed(
							$current,
							"default",
							lv_default_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_3='consider'
			{
				newLeafNode(otherlv_3, grammarAccess.getConfigurationAccess().getConsiderKeyword_1_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getConfigurationAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConfigurationAccess().getConsiderConsiderEnumRuleCall_1_2_0());
					}
					lv_consider_5_0=ruleConsider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConfigurationRule());
						}
						set(
							$current,
							"consider",
							lv_consider_5_0,
							"org.tracesec.graph.dsl.GraphConfiguration.Consider");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getNamespacesNamespaceParserRuleCall_2_0());
				}
				lv_namespaces_6_0=ruleNamespace
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					add(
						$current,
						"namespaces",
						lv_namespaces_6_0,
						"org.tracesec.graph.dsl.GraphConfiguration.Namespace");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleNamespace
entryRuleNamespace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamespaceRule()); }
	iv_ruleNamespace=ruleNamespace
	{ $current=$iv_ruleNamespace.current; }
	EOF;

// Rule Namespace
ruleNamespace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='namespace'
		{
			newLeafNode(otherlv_0, grammarAccess.getNamespaceAccess().getNamespaceKeyword_0());
		}
		(
			(
				lv_package_1_0=RULE_STRING
				{
					newLeafNode(lv_package_1_0, grammarAccess.getNamespaceAccess().getPackageSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNamespaceRule());
					}
					setWithLastConsumed(
						$current,
						"package",
						lv_package_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getNamespaceAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='default'
			{
				newLeafNode(otherlv_3, grammarAccess.getNamespaceAccess().getDefaultKeyword_3_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getNamespaceAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					lv_default_5_0=RULE_INT
					{
						newLeafNode(lv_default_5_0, grammarAccess.getNamespaceAccess().getDefaultINTTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNamespaceRule());
						}
						setWithLastConsumed(
							$current,
							"default",
							lv_default_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_6='consider'
			{
				newLeafNode(otherlv_6, grammarAccess.getNamespaceAccess().getConsiderKeyword_4_0());
			}
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getNamespaceAccess().getEqualsSignKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNamespaceAccess().getConsiderConsiderEnumRuleCall_4_2_0());
					}
					lv_consider_8_0=ruleConsider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNamespaceRule());
						}
						set(
							$current,
							"consider",
							lv_consider_8_0,
							"org.tracesec.graph.dsl.GraphConfiguration.Consider");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9='include'
			{
				newLeafNode(otherlv_9, grammarAccess.getNamespaceAccess().getIncludeKeyword_5_0());
			}
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getNamespaceAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNamespaceAccess().getIncludeTypeParserRuleCall_5_2_0());
					}
					lv_include_11_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNamespaceRule());
						}
						add(
							$current,
							"include",
							lv_include_11_0,
							"org.tracesec.graph.dsl.GraphConfiguration.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getNamespaceAccess().getRightCurlyBracketKeyword_5_3());
			}
		)?
		(
			otherlv_13='exclude'
			{
				newLeafNode(otherlv_13, grammarAccess.getNamespaceAccess().getExcludeKeyword_6_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getNamespaceAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNamespaceRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getNamespaceAccess().getExcludeEClassCrossReference_6_2_0());
					}
				)
			)+
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getNamespaceAccess().getRightCurlyBracketKeyword_6_3());
			}
		)?
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getNamespaceAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getTypeEClassCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='consider'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getConsiderKeyword_3_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getConsiderConsiderEnumRuleCall_3_2_0());
					}
					lv_consider_5_0=ruleConsider
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"consider",
							lv_consider_5_0,
							"org.tracesec.graph.dsl.GraphConfiguration.Consider");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='default'
			{
				newLeafNode(otherlv_6, grammarAccess.getTypeAccess().getDefaultKeyword_4_0());
			}
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getEqualsSignKeyword_4_1());
			}
			(
				(
					lv_default_8_0=RULE_INT
					{
						newLeafNode(lv_default_8_0, grammarAccess.getTypeAccess().getDefaultINTTerminalRuleCall_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed(
							$current,
							"default",
							lv_default_8_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_9='include'
			{
				newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getIncludeKeyword_5_0());
			}
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getInlcudeEdgeParserRuleCall_5_2_0());
					}
					lv_inlcude_11_0=ruleEdge
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						add(
							$current,
							"inlcude",
							lv_inlcude_11_0,
							"org.tracesec.graph.dsl.GraphConfiguration.Edge");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_5_3());
			}
		)?
		(
			otherlv_13='exclude'
			{
				newLeafNode(otherlv_13, grammarAccess.getTypeAccess().getExcludeKeyword_6_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getTypeAccess().getExcludeEReferenceCrossReference_6_2_0());
					}
				)
			)+
			otherlv_16='}'
			{
				newLeafNode(otherlv_16, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_6_3());
			}
		)?
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleEdge
entryRuleEdge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEdgeRule()); }
	iv_ruleEdge=ruleEdge
	{ $current=$iv_ruleEdge.current; }
	EOF;

// Rule Edge
ruleEdge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reference'
		{
			newLeafNode(otherlv_0, grammarAccess.getEdgeAccess().getReferenceKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEdgeAccess().getReferenceEReferenceCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='--'
			{
				newLeafNode(otherlv_2, grammarAccess.getEdgeAccess().getHyphenMinusHyphenMinusKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEdgeRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getEdgeAccess().getTypeEClassCrossReference_2_1_0());
					}
				)
			)
			(
				otherlv_4='--'
				{
					newLeafNode(otherlv_4, grammarAccess.getEdgeAccess().getHyphenMinusHyphenMinusKeyword_2_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEdgeRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getEdgeAccess().getTargetEReferenceCrossReference_2_2_1_0());
						}
					)
				)
			)?
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getEdgeAccess().getDirectionDirectionEnumRuleCall_3_0());
				}
				lv_direction_6_0=ruleDirection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEdgeRule());
					}
					set(
						$current,
						"direction",
						lv_direction_6_0,
						"org.tracesec.graph.dsl.GraphConfiguration.Direction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEdgeAccess().getWeightWeightParserRuleCall_4_0());
				}
				lv_weight_7_0=ruleWeight
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEdgeRule());
					}
					set(
						$current,
						"weight",
						lv_weight_7_0,
						"org.tracesec.graph.dsl.GraphConfiguration.Weight");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWeight
entryRuleWeight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWeightRule()); }
	iv_ruleWeight=ruleWeight
	{ $current=$iv_ruleWeight.current; }
	EOF;

// Rule Weight
ruleWeight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWeightAccess().getNumberWeightParserRuleCall_0());
		}
		this_NumberWeight_0=ruleNumberWeight
		{
			$current = $this_NumberWeight_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWeightAccess().getAttributeWeightParserRuleCall_1());
		}
		this_AttributeWeight_1=ruleAttributeWeight
		{
			$current = $this_AttributeWeight_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumberWeight
entryRuleNumberWeight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberWeightRule()); }
	iv_ruleNumberWeight=ruleNumberWeight
	{ $current=$iv_ruleNumberWeight.current; }
	EOF;

// Rule NumberWeight
ruleNumberWeight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberWeightAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberWeightRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleAttributeWeight
entryRuleAttributeWeight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeWeightRule()); }
	iv_ruleAttributeWeight=ruleAttributeWeight
	{ $current=$iv_ruleAttributeWeight.current; }
	EOF;

// Rule AttributeWeight
ruleAttributeWeight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAttributeWeightRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getAttributeWeightAccess().getValueEAttributeCrossReference_0());
			}
		)
	)
;

// Rule Consider
ruleConsider returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ALL'
			{
				$current = grammarAccess.getConsiderAccess().getALLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConsiderAccess().getALLEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='NONE'
			{
				$current = grammarAccess.getConsiderAccess().getNONEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConsiderAccess().getNONEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Direction
ruleDirection returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='->'
			{
				$current = grammarAccess.getDirectionAccess().getFWDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDirectionAccess().getFWDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<-'
			{
				$current = grammarAccess.getDirectionAccess().getBWDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDirectionAccess().getBWDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<->'
			{
				$current = grammarAccess.getDirectionAccess().getBIEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDirectionAccess().getBIEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
