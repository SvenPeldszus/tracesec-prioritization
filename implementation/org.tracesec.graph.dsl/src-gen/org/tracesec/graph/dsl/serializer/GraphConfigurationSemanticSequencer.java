/*
 * generated by Xtext 2.26.0
 */
package org.tracesec.graph.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.tracesec.graph.dsl.graphConfiguration.AttributeWeight;
import org.tracesec.graph.dsl.graphConfiguration.Configuration;
import org.tracesec.graph.dsl.graphConfiguration.Edge;
import org.tracesec.graph.dsl.graphConfiguration.GraphConfigurationPackage;
import org.tracesec.graph.dsl.graphConfiguration.Namespace;
import org.tracesec.graph.dsl.graphConfiguration.NumberWeight;
import org.tracesec.graph.dsl.graphConfiguration.Type;
import org.tracesec.graph.dsl.services.GraphConfigurationGrammarAccess;

@SuppressWarnings("all")
public class GraphConfigurationSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GraphConfigurationGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GraphConfigurationPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GraphConfigurationPackage.ATTRIBUTE_WEIGHT:
				sequence_AttributeWeight(context, (AttributeWeight) semanticObject); 
				return; 
			case GraphConfigurationPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case GraphConfigurationPackage.EDGE:
				sequence_Edge(context, (Edge) semanticObject); 
				return; 
			case GraphConfigurationPackage.NAMESPACE:
				sequence_Namespace(context, (Namespace) semanticObject); 
				return; 
			case GraphConfigurationPackage.NUMBER_WEIGHT:
				sequence_NumberWeight(context, (NumberWeight) semanticObject); 
				return; 
			case GraphConfigurationPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Weight returns AttributeWeight
	 *     AttributeWeight returns AttributeWeight
	 *
	 * Constraint:
	 *     (owner=Owner? value=[EAttribute|ID])
	 * </pre>
	 */
	protected void sequence_AttributeWeight(ISerializationContext context, AttributeWeight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (default=INT? consider=Consider? namespaces+=Namespace+)
	 * </pre>
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Edge returns Edge
	 *
	 * Constraint:
	 *     (reference=[EReference|ID] (type=[EClass|ID] target=[EReference|ID]?)? direction=Direction weight=Weight)
	 * </pre>
	 */
	protected void sequence_Edge(ISerializationContext context, Edge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Namespace returns Namespace
	 *
	 * Constraint:
	 *     (package=STRING default=INT? consider=Consider? include+=Type* exclude+=[EClass|ID]*)
	 * </pre>
	 */
	protected void sequence_Namespace(ISerializationContext context, Namespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Weight returns NumberWeight
	 *     NumberWeight returns NumberWeight
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_NumberWeight(ISerializationContext context, NumberWeight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphConfigurationPackage.Literals.NUMBER_WEIGHT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphConfigurationPackage.Literals.NUMBER_WEIGHT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberWeightAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (type=[EClass|ID] consider=Consider? default=INT? inlcude+=Edge* exclude+=[EReference|ID]*)
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
