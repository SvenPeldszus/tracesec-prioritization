/**
 * generated by Xtext 2.25.0
 */
package org.tracesec.graph.dsl.graphConfiguration.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.tracesec.graph.dsl.graphConfiguration.Consider;
import org.tracesec.graph.dsl.graphConfiguration.Edge;
import org.tracesec.graph.dsl.graphConfiguration.GraphConfigurationPackage;
import org.tracesec.graph.dsl.graphConfiguration.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.TypeImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.TypeImpl#getConsider <em>Consider</em>}</li>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.TypeImpl#getDefault <em>Default</em>}</li>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.TypeImpl#getInlcude <em>Inlcude</em>}</li>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.TypeImpl#getExclude <em>Exclude</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeImpl extends MinimalEObjectImpl.Container implements Type
{
  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected EClass type;

  /**
   * The default value of the '{@link #getConsider() <em>Consider</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsider()
   * @generated
   * @ordered
   */
  protected static final Consider CONSIDER_EDEFAULT = Consider.ALL;

  /**
   * The cached value of the '{@link #getConsider() <em>Consider</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsider()
   * @generated
   * @ordered
   */
  protected Consider consider = CONSIDER_EDEFAULT;

  /**
   * The default value of the '{@link #getDefault() <em>Default</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefault()
   * @generated
   * @ordered
   */
  protected static final int DEFAULT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDefault() <em>Default</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefault()
   * @generated
   * @ordered
   */
  protected int default_ = DEFAULT_EDEFAULT;

  /**
   * The cached value of the '{@link #getInlcude() <em>Inlcude</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInlcude()
   * @generated
   * @ordered
   */
  protected EList<Edge> inlcude;

  /**
   * The cached value of the '{@link #getExclude() <em>Exclude</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExclude()
   * @generated
   * @ordered
   */
  protected EList<EReference> exclude;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphConfigurationPackage.Literals.TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (EClass)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GraphConfigurationPackage.TYPE__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(EClass newType)
  {
    EClass oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphConfigurationPackage.TYPE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Consider getConsider()
  {
    return consider;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConsider(Consider newConsider)
  {
    Consider oldConsider = consider;
    consider = newConsider == null ? CONSIDER_EDEFAULT : newConsider;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphConfigurationPackage.TYPE__CONSIDER, oldConsider, consider));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getDefault()
  {
    return default_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefault(int newDefault)
  {
    int oldDefault = default_;
    default_ = newDefault;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphConfigurationPackage.TYPE__DEFAULT, oldDefault, default_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Edge> getInlcude()
  {
    if (inlcude == null)
    {
      inlcude = new EObjectContainmentEList<Edge>(Edge.class, this, GraphConfigurationPackage.TYPE__INLCUDE);
    }
    return inlcude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EReference> getExclude()
  {
    if (exclude == null)
    {
      exclude = new EObjectResolvingEList<EReference>(EReference.class, this, GraphConfigurationPackage.TYPE__EXCLUDE);
    }
    return exclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.TYPE__INLCUDE:
        return ((InternalEList<?>)getInlcude()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.TYPE__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case GraphConfigurationPackage.TYPE__CONSIDER:
        return getConsider();
      case GraphConfigurationPackage.TYPE__DEFAULT:
        return getDefault();
      case GraphConfigurationPackage.TYPE__INLCUDE:
        return getInlcude();
      case GraphConfigurationPackage.TYPE__EXCLUDE:
        return getExclude();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.TYPE__TYPE:
        setType((EClass)newValue);
        return;
      case GraphConfigurationPackage.TYPE__CONSIDER:
        setConsider((Consider)newValue);
        return;
      case GraphConfigurationPackage.TYPE__DEFAULT:
        setDefault((Integer)newValue);
        return;
      case GraphConfigurationPackage.TYPE__INLCUDE:
        getInlcude().clear();
        getInlcude().addAll((Collection<? extends Edge>)newValue);
        return;
      case GraphConfigurationPackage.TYPE__EXCLUDE:
        getExclude().clear();
        getExclude().addAll((Collection<? extends EReference>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.TYPE__TYPE:
        setType((EClass)null);
        return;
      case GraphConfigurationPackage.TYPE__CONSIDER:
        setConsider(CONSIDER_EDEFAULT);
        return;
      case GraphConfigurationPackage.TYPE__DEFAULT:
        setDefault(DEFAULT_EDEFAULT);
        return;
      case GraphConfigurationPackage.TYPE__INLCUDE:
        getInlcude().clear();
        return;
      case GraphConfigurationPackage.TYPE__EXCLUDE:
        getExclude().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.TYPE__TYPE:
        return type != null;
      case GraphConfigurationPackage.TYPE__CONSIDER:
        return consider != CONSIDER_EDEFAULT;
      case GraphConfigurationPackage.TYPE__DEFAULT:
        return default_ != DEFAULT_EDEFAULT;
      case GraphConfigurationPackage.TYPE__INLCUDE:
        return inlcude != null && !inlcude.isEmpty();
      case GraphConfigurationPackage.TYPE__EXCLUDE:
        return exclude != null && !exclude.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (consider: ");
    result.append(consider);
    result.append(", default: ");
    result.append(default_);
    result.append(')');
    return result.toString();
  }

} //TypeImpl
