/**
 * generated by Xtext 2.25.0
 */
package org.tracesec.graph.dsl.graphConfiguration.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.tracesec.graph.dsl.graphConfiguration.Configuration;
import org.tracesec.graph.dsl.graphConfiguration.Consider;
import org.tracesec.graph.dsl.graphConfiguration.GraphConfigurationPackage;
import org.tracesec.graph.dsl.graphConfiguration.Namespace;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.ConfigurationImpl#getDefault <em>Default</em>}</li>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.ConfigurationImpl#getConsider <em>Consider</em>}</li>
 *   <li>{@link org.tracesec.graph.dsl.graphConfiguration.impl.ConfigurationImpl#getNamespaces <em>Namespaces</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigurationImpl extends MinimalEObjectImpl.Container implements Configuration
{
  /**
   * The default value of the '{@link #getDefault() <em>Default</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefault()
   * @generated
   * @ordered
   */
  protected static final int DEFAULT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDefault() <em>Default</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefault()
   * @generated
   * @ordered
   */
  protected int default_ = DEFAULT_EDEFAULT;

  /**
   * The default value of the '{@link #getConsider() <em>Consider</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsider()
   * @generated
   * @ordered
   */
  protected static final Consider CONSIDER_EDEFAULT = Consider.ALL;

  /**
   * The cached value of the '{@link #getConsider() <em>Consider</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsider()
   * @generated
   * @ordered
   */
  protected Consider consider = CONSIDER_EDEFAULT;

  /**
   * The cached value of the '{@link #getNamespaces() <em>Namespaces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNamespaces()
   * @generated
   * @ordered
   */
  protected EList<Namespace> namespaces;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphConfigurationPackage.Literals.CONFIGURATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getDefault()
  {
    return default_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefault(int newDefault)
  {
    int oldDefault = default_;
    default_ = newDefault;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphConfigurationPackage.CONFIGURATION__DEFAULT, oldDefault, default_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Consider getConsider()
  {
    return consider;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConsider(Consider newConsider)
  {
    Consider oldConsider = consider;
    consider = newConsider == null ? CONSIDER_EDEFAULT : newConsider;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphConfigurationPackage.CONFIGURATION__CONSIDER, oldConsider, consider));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Namespace> getNamespaces()
  {
    if (namespaces == null)
    {
      namespaces = new EObjectContainmentEList<Namespace>(Namespace.class, this, GraphConfigurationPackage.CONFIGURATION__NAMESPACES);
    }
    return namespaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.CONFIGURATION__NAMESPACES:
        return ((InternalEList<?>)getNamespaces()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.CONFIGURATION__DEFAULT:
        return getDefault();
      case GraphConfigurationPackage.CONFIGURATION__CONSIDER:
        return getConsider();
      case GraphConfigurationPackage.CONFIGURATION__NAMESPACES:
        return getNamespaces();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.CONFIGURATION__DEFAULT:
        setDefault((Integer)newValue);
        return;
      case GraphConfigurationPackage.CONFIGURATION__CONSIDER:
        setConsider((Consider)newValue);
        return;
      case GraphConfigurationPackage.CONFIGURATION__NAMESPACES:
        getNamespaces().clear();
        getNamespaces().addAll((Collection<? extends Namespace>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.CONFIGURATION__DEFAULT:
        setDefault(DEFAULT_EDEFAULT);
        return;
      case GraphConfigurationPackage.CONFIGURATION__CONSIDER:
        setConsider(CONSIDER_EDEFAULT);
        return;
      case GraphConfigurationPackage.CONFIGURATION__NAMESPACES:
        getNamespaces().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphConfigurationPackage.CONFIGURATION__DEFAULT:
        return default_ != DEFAULT_EDEFAULT;
      case GraphConfigurationPackage.CONFIGURATION__CONSIDER:
        return consider != CONSIDER_EDEFAULT;
      case GraphConfigurationPackage.CONFIGURATION__NAMESPACES:
        return namespaces != null && !namespaces.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (default: ");
    result.append(default_);
    result.append(", consider: ");
    result.append(consider);
    result.append(')');
    return result.toString();
  }

} //ConfigurationImpl
